@prefix xrr: <http://i3s.unice.fr/xr2rml#> .
@prefix rr:  <http://www.w3.org/ns/r2rml#> .
@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
@prefix ex: <http://ex.org/bios/> .
@prefix :   <http://bios.org/>
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

#"target": "ex:person/{_id}/award/{awards.#} a :ReceivedAward ; :receivedIn {awards.#.year}^^xsd:integer ; :hasTitle {awards.#.award}^^xsd:string ."

<#Award>
    xrr:logicalSource [
        xrr:query "db.bios.find({})";
        #xrr:query "db.bios.find({})";
    ];
    rr:subjectMap [ rr:template "ex:person/{$._id}/award/{$.awards[*].year}／{$.awards[*].award}"];
    rr:predicateObjectMap [
        rr:predicate rdf:type;
        rr:objectMap [
           rr:constant :ReceivedAward;
           rr:termType rr:IRI
        ]
    ].

<#Award1>
    xrr:logicalSource [
        xrr:query "db.bios.find({})";
    ];
    rr:subjectMap [ rr:template "ex:person/{$._id}/award/{$.awards[*].year}／{$.awards[*].award}"];
    rr:predicateObjectMap [
        rr:predicate :receivedIn;
        rr:objectMap [
            rr:template "{$.awards[*].year}";
            rr:termType rr:Literal;
            rr:datatype xsd:string
        ]
    ]
   .

<#Award2>
    xrr:logicalSource [
        xrr:query "db.bios.find({})";
    ];
    rr:subjectMap [ rr:template "ex:person/{$._id}/award/{$.awards[*].year}／{$.awards[*].award}"];
    rr:predicateObjectMap [
        rr:predicate :hasTitle;
        rr:objectMap [
            rr:template "{$.awards[*].year}";
            rr:termType rr:Literal;
            rr:datatype xsd:string
        ]
    ]
   .

<#Researcher>
    xrr:logicalSource [ xrr:query "db.bios.find({})" ];
    rr:subjectMap [ rr:template "ex:person/{$._id}" ; rr:class ex:Researcher ] ;
    rr:predicateObjectMap [
        rr:predicate rdf:type;
        rr:objectMap [
            rr:constant :Researcher;
            rr:termType rr:IRI
        ]
      ]
   .

#   rr:predicateObjectMap [
#      rr:predicate ex:directed;
#      rr:objectMap [
#         rr:parentTriplesMap <#Movies>;
#         rr:joinCondition [
#            rr:child "$.directed.*";
#            rr:parent "$.name";
#         ]
#      ]
#   ].
