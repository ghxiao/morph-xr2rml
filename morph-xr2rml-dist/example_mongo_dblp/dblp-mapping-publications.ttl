@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema> .
@prefix : <http://dblp.l3s.de/d2r/> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix swrc: <http://swrc.ontoware.org/ontology#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .

@prefix xrr: <http://i3s.unice.fr/xr2rml#> .
@prefix rr:  <http://www.w3.org/ns/r2rml#> .
@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
@prefix ex: <http://ex.org/bios/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

# "target": ":authors/{_id} a :Author ; a foaf:Agent ; foaf:name {name}^^xsd:string ; foaf:homepage {homepage}^^xsd:string ; :hasCoauthor :authors/{coauthors.#._id} .

:source_author xrr:query "db.publications.find({})"; rml:iterator "$.authors.*" .

<#Author_Author>
    xrr:logicalSource :source_author ;
    rr:subjectMap [ rr:template ":authors/{_id}"];
    rr:predicateObjectMap [
        rr:predicate rdf:type;
        rr:objectMap [
           rr:constant :Author;
           rr:termType rr:IRI
        ]
    ].

<#Author_Agent>
    xrr:logicalSource :source_author ;
    rr:subjectMap [ rr:template ":authors/{_id}"];
    rr:predicateObjectMap [
        rr:predicate rdf:type;
        rr:objectMap [
           rr:constant foaf:Agent;
           rr:termType rr:IRI
        ]
    ].

<#Author_name>
    a rr:TriplesMap;
    xrr:logicalSource :source_author ;
    rr:subjectMap [ rr:template ":authors/{_id}"];
    rr:predicateObjectMap [
        rr:predicate foaf:name;
        rr:objectMap [ xrr:reference "$.name" ]
    ].

<#Author_homepage>
    a rr:TriplesMap;
    xrr:logicalSource :source_author ;
    rr:subjectMap [ rr:template ":authors/{_id}"];
    rr:predicateObjectMap [
        rr:predicate foaf:homepage;
        rr:objectMap [ xrr:reference "$.homepage" ]
    ].

# :journals/{_id} a swrc:Journal ; a :JournalArticle ; a :Publication ; dc:title {title}^^xsd:string ; dcterms:issued {year}^^xsd:integer ; swrc:pages {pages}^^xsd:string ; :appearsIn {in}^^xsd:string ; foaf:homepage {url}^^xsd:string . "

:source_journal xrr:query """db.publications.find({'type' : 'article'})"""; 
rml:iterator "$" ; 
xrr:uniqueRef "_id" .

<#Article_swrc_Journal>
    xrr:logicalSource :source_journal ;
    rr:subjectMap [ rr:template ":journals/{_id}"];
    rr:predicateObjectMap [
        rr:predicate rdf:type;
        rr:objectMap [ rr:constant swrc:Journal; rr:termType rr:IRI]
    ].

<#Article_JournalArticle>
    xrr:logicalSource :source_journal ;
    rr:subjectMap [ rr:template ":journals/{_id}"];
    rr:predicateObjectMap [
        rr:predicate rdf:type;
        rr:objectMap [ rr:constant :JournalArticle; rr:termType rr:IRI]
    ].

<#Article_Publication>
    xrr:logicalSource :source_journal ;
    rr:subjectMap [ rr:template ":journals/{_id}"];
    rr:predicateObjectMap [
        rr:predicate rdf:type;
        rr:objectMap [ rr:constant :Publication; rr:termType rr:IRI]
    ].

<#Article_title>
    xrr:logicalSource :source_journal ;
    rr:subjectMap [ rr:template ":journals/{_id}"];
    rr:predicateObjectMap [
        rr:predicate dc:title;
        rr:objectMap [ xrr:reference "$.title"]
    ].

<#Article_issued>
    xrr:logicalSource :source_journal ;
    rr:subjectMap [ rr:template ":journals/{_id}"];
    rr:predicateObjectMap [
        rr:predicate dcterms:issued;
        rr:objectMap [ xrr:reference "$.year" ]
    ].

<#Article_pages>
    xrr:logicalSource :source_journal ;
    rr:subjectMap [ rr:template ":journals/{_id}"];
    rr:predicateObjectMap [
        rr:predicate swrc:pages;
        rr:objectMap [ xrr:reference "$.pages" ]
    ].


# empty!
<#Article_appearsIn>
    xrr:logicalSource :source_journal ;
    rr:subjectMap [ rr:template ":journals/{_id}"];
    rr:predicateObjectMap [
        rr:predicate :appearsIn;
        rr:objectMap [ xrr:reference "$.in" ]
    ].

<#Article_homepage>
    xrr:logicalSource :source_journal ;
    rr:subjectMap [ rr:template ":journals/{_id}"];
    rr:predicateObjectMap [
        rr:predicate foaf:homepage;
        rr:objectMap [ xrr:reference "$.url" ]
    ].
    
# "target": ":journals/{_id} dc:creator :authors/{authors.#._id} . "

<#Journal_creator>
    xrr:logicalSource :source_journal ;
    rr:subjectMap [ rr:template ":journals/{_id}"];
    rr:predicateObjectMap [
        rr:predicate dc:creator;
        rr:objectMap [ rr:template ":authors/{authors[*]._id}"; rr:termType rr:IRI]
    ].
    

# ":inproceedings/{_id} a swrc:Conference ; a :ConferencePaper ; a :Publication ; dc:title {title}^^xsd:string ; dcterms:issued {year}^^xsd:integer ; swrc:pages {pages}^^xsd:string ; foaf:homepage {url}^^xsd:string ; dcterms:partOf :proceedings/{proceedings} . :proceedings/{proceedings} a :Proceedings ; dc:title {booktitle}^^xsd:string . "

:source_inproceedings xrr:query """db.publications.find({'type' : 'inproceedings'})"""; rml:iterator "$" .

<#inproceedings_swrc_Conference>
    xrr:logicalSource :source_inproceedings ;
    rr:subjectMap [ rr:template ":inproceedings/{_id}"];
    rr:predicateObjectMap [
        rr:predicate rdf:type;
        rr:objectMap [ rr:constant swrc:Conference; rr:termType rr:IRI]
    ].


<#inproceedings_ConferencePaper>
    xrr:logicalSource :source_inproceedings ;
    rr:subjectMap [ rr:template ":inproceedings/{_id}"];
    rr:predicateObjectMap [
        rr:predicate rdf:type;
        rr:objectMap [ rr:constant :ConferencePaper; rr:termType rr:IRI]
    ].

<#inproceedings_Publication>
    xrr:logicalSource :source_inproceedings ;
    rr:subjectMap [ rr:template ":inproceedings/{_id}"];
    rr:predicateObjectMap [
        rr:predicate rdf:type;
        rr:objectMap [ rr:constant :Publication; rr:termType rr:IRI]
    ].

<#inproceedings_title>
    xrr:logicalSource :source_inproceedings ;
    rr:subjectMap [ rr:template ":inproceedings/{_id}"];
    rr:predicateObjectMap [
        rr:predicate dc:title;
        rr:objectMap [ xrr:reference "$.title"]
    ].

<#inproceedings_issued>
    xrr:logicalSource :source_inproceedings ;
    rr:subjectMap [ rr:template ":inproceedings/{_id}"];
    rr:predicateObjectMap [
        rr:predicate dcterms:issued;
        rr:objectMap [ xrr:reference "$.year" ]
    ].

<#inproceedings_pages>
    xrr:logicalSource :source_inproceedings ;
    rr:subjectMap [ rr:template ":inproceedings/{_id}"];
    rr:predicateObjectMap [
        rr:predicate swrc:pages;
        rr:objectMap [ xrr:reference "$.pages" ]
    ].


<#inproceedings_homepage>
    xrr:logicalSource :source_inproceedings ;
    rr:subjectMap [ rr:template ":inproceedings/{_id}"];
    rr:predicateObjectMap [
        rr:predicate foaf:homepage;
        rr:objectMap [ xrr:reference "$.url" ]
    ].
    
<#inproceedings_partOf>
    xrr:logicalSource :source_inproceedings ;
    rr:subjectMap [ rr:template ":inproceedings/{_id}"];
    rr:predicateObjectMap [
        rr:predicate dcterms:partOf;
        rr:objectMap [ rr:template ":proceedings/{$.proceedings}"; rr:termType rr:IRI]
    ].    
    
<#Proceedings>
    xrr:logicalSource :source_inproceedings ;
    rr:subjectMap [ rr:template ":proceedings/{$.proceedings}"];
    rr:predicateObjectMap [
        rr:predicate dcterms:partOf;
        rr:objectMap [ rr:constant :Proceedings; rr:termType rr:IRI]        
    ].   

<#proceedings_title>
    xrr:logicalSource :source_inproceedings ;
    rr:subjectMap [ rr:template ":proceedings/{$.proceedings}"];
    rr:predicateObjectMap [
        rr:predicate dc:title;
        rr:objectMap [ xrr:reference "$.booktitle" ]
    ].    

### CHECK!!!
<#inproceedings_creator>
    xrr:logicalSource :source_inproceedings ;
    rr:subjectMap [ rr:template ":proceedings/{_id}"];
    rr:predicateObjectMap [
        rr:predicate dc:creator;
        rr:objectMap [ rr:template ":authors/{authors[*]._id}"; rr:termType rr:IRI]
    ].


# ":collections/{_id} a swrc:Collection ; a :BookChapter ; a :Publication ; dc:title {title}^^xsd:string ; dcterms:issued {year}^^xsd:integer ; swrc:pages {pages}^^xsd:string ; foaf:homepage {url}^^xsd:string ; dcterms:partOf :books/{proceedings} ; :chapterIn :books/{proceedings} . :books/{proceedings} a :Book ; dc:title {booktitle}^^xsd:string . "    

:source_incollection xrr:query """db.publications.find({'type' : 'incollection'})"""; rml:iterator "$" .

<#collections_swrc_Conference>
    xrr:logicalSource :source_incollection ;
    rr:subjectMap [ rr:template ":collections/{_id}"];
    rr:predicateObjectMap [
        rr:predicate rdf:type;
        rr:objectMap [ rr:constant swrc:Collection; rr:termType rr:IRI]
    ].


<#collections_BookChapter>
    xrr:logicalSource :source_incollection ;
    rr:subjectMap [ rr:template ":collections/{_id}"];
    rr:predicateObjectMap [
        rr:predicate rdf:type;
        rr:objectMap [ rr:constant :BookChapter; rr:termType rr:IRI]
    ].

<#collections_Publication>
    xrr:logicalSource :source_incollection ;
    rr:subjectMap [ rr:template ":collections/{_id}"];
    rr:predicateObjectMap [
        rr:predicate rdf:type;
        rr:objectMap [ rr:constant :Publication; rr:termType rr:IRI]
    ].

<#collections_title>
    xrr:logicalSource :source_incollection ;
    rr:subjectMap [ rr:template ":collections/{_id}"];
    rr:predicateObjectMap [
        rr:predicate dc:title;
        rr:objectMap [ xrr:reference "$.title"]
    ].

<#collections_issued>
    xrr:logicalSource :source_incollection ;
    rr:subjectMap [ rr:template ":collections/{_id}"];
    rr:predicateObjectMap [
        rr:predicate dcterms:issued;
        rr:objectMap [ xrr:reference "$.year" ]
    ].

<#collections_pages>
    xrr:logicalSource :source_incollection ;
    rr:subjectMap [ rr:template ":collections/{_id}"];
    rr:predicateObjectMap [
        rr:predicate swrc:pages;
        rr:objectMap [ xrr:reference "$.pages" ]
    ].


<#collections_homepage>
    xrr:logicalSource :source_incollection ;
    rr:subjectMap [ rr:template ":collections/{_id}"];
    rr:predicateObjectMap [
        rr:predicate foaf:homepage;
        rr:objectMap [ xrr:reference "$.url" ]
    ].
    
<#collections_partOf>
    xrr:logicalSource :source_incollection ;
    rr:subjectMap [ rr:template ":collections/{_id}"];
    rr:predicateObjectMap [
        rr:predicate dcterms:partOf;
        rr:objectMap [ rr:template ":proceedings/{$.proceedings}"; rr:termType rr:IRI]
    ].    
    
<#Book>
    xrr:logicalSource :source_incollection ;
    rr:subjectMap [ rr:template ":books/{$.proceedings}"];
    rr:predicateObjectMap [
        rr:predicate dcterms:partOf;
        rr:objectMap [ rr:constant :Book; rr:termType rr:IRI]        
    ].   

<#Book_title>
    xrr:logicalSource :source_incollection ;
    rr:subjectMap [ rr:template ":books/{$.proceedings}"];
    rr:predicateObjectMap [
        rr:predicate dc:title;
        rr:objectMap [ xrr:reference "$.booktitle" ]
    ].  
    
### CHECK SUBJECT !!!
<#Book_creator>
    xrr:logicalSource :source_incollection ;
    rr:subjectMap [ rr:template ":books/{proceedings}"];
    rr:predicateObjectMap [
        rr:predicate dc:creator;
        rr:objectMap [ rr:template ":authors/{authors[*]._id}"; rr:termType rr:IRI]
    ].    
