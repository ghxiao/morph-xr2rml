@prefix xrr: <http://i3s.unice.fr/xr2rml#> .
@prefix rr:  <http://www.w3.org/ns/r2rml#> .
@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
@prefix ex: <http://ex.org/bios/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#>
@prefix ex:  <http://ex.org/awards/>
@prefix :  <http://awards.org/>

#"target": "ex:person/{_id} a :Person ; :hasFirstName {name.first}^^xsd:string ; :hasLastName {name.last}^^xsd:string ; :bornInYear {birth.year}^^xsd:integer ; :bornInMonth {birth.month}^^xsd:integer ; :bornOnDay {birth.day}^^xsd:integer ; :bornIn {bornIn}^^xsd:string ; :diedInYear {death.year}^^xsd:integer ; :diedInMonth {death.month}^^xsd:integer ; :diedOnDay {death.day}^^xsd:integer ; :hasReceived ex:person/{_id}/award/{awards.#} ; :hasOccupation {occupation.$}^^xsd:string . "

:source_persons xrr:query "db.awards.find({})"; rml:iterator "$" ; xrr:uniqueRef "_id" .

<#Person_Person>
    xrr:logicalSource :source_persons ;
    rr:subjectMap [ rr:template "ex:person/{_id}"];
    rr:predicateObjectMap [
        rr:predicate rdf:type;
        rr:objectMap [
           rr:constant  :Person;
           rr:termType rr:IRI
        ]
    ].
	
<#Person_hasFirstName>
    xrr:logicalSource :source_persons ;
    rr:subjectMap [ rr:template "ex:person/{_id}"];
 	rr:predicateObjectMap [
     	rr:predicate :hasFirstName;
	 	rr:objectMap [ xrr:reference "$.name.first" ]
   ].
   
<#Person_hasLastName>
   xrr:logicalSource :source_persons ;
   rr:subjectMap [ rr:template "ex:person/{_id}"];
   rr:predicateObjectMap [
    	rr:predicate :hasLastName;
 	rr:objectMap [ xrr:reference "$.name.last" ]
  ].
  
<#Person_bornInYear>
 	xrr:logicalSource :source_persons ;
 	rr:subjectMap [ rr:template "ex:person/{_id}"];
	rr:predicateObjectMap [
  		rr:predicate :bornInYear;
	rr:objectMap [ xrr:reference "$.birth.year" ]
].

<#Person_bornInMonth>
 	xrr:logicalSource :source_persons ;
 	rr:subjectMap [ rr:template "ex:person/{_id}"];
	rr:predicateObjectMap [
  		rr:predicate :bornInMonth;
	rr:objectMap [ xrr:reference "$.birth.month" ]
].

<#Person_bornOnDay>
 	xrr:logicalSource :source_persons ;
 	rr:subjectMap [ rr:template "ex:person/{_id}"];
	rr:predicateObjectMap [
  		rr:predicate :bornOnDay;
	rr:objectMap [ xrr:reference "$.birth.day" ]
].

<#Person_bornIn>
 	xrr:logicalSource :source_persons ;
 	rr:subjectMap [ rr:template "ex:person/{_id}"];
	rr:predicateObjectMap [
  		rr:predicate :bornIn;
	rr:objectMap [ xrr:reference "$.bornIn" ]
].  
  
<#Person_diedInYear>
 	xrr:logicalSource :source_persons ;
 	rr:subjectMap [ rr:template "ex:person/{_id}"];
	rr:predicateObjectMap [
  		rr:predicate :diedInYear;
	rr:objectMap [ xrr:reference "$.death.year" ]
].  

<#Person_diedInMonth>
 	xrr:logicalSource :source_persons ;
 	rr:subjectMap [ rr:template "ex:person/{_id}"];
	rr:predicateObjectMap [
  		rr:predicate :diedInMonth;
	rr:objectMap [ xrr:reference "$.death.month" ]
]. 

<#Person_diedOnDay>
 	xrr:logicalSource :source_persons ;
 	rr:subjectMap [ rr:template "ex:person/{_id}"];
	rr:predicateObjectMap [
  		rr:predicate :diedOnDay;
	rr:objectMap [ xrr:reference "$.death.day" ]
].   
  
<#Person_hasReceived>
   xrr:logicalSource :source_persons ;
   rr:subjectMap [ rr:template "ex:person/{_id}"];
   rr:predicateObjectMap [
       rr:predicate :hasReceived;
       rr:objectMap [
         rr:template "ex:person/award/{$.awards[*].id}";
         rr:termType rr:IRI ]
  ].
  
<#Person_hasOccupation>
 xrr:logicalSource :source_persons ;
 rr:subjectMap [ rr:template "ex:person/{_id}"];
 rr:predicateObjectMap [
     rr:predicate :hasOccupation;
 	rr:objectMap [ xrr:reference "$.occupation[*]" ]
 ].   
 
# "target": "ex:person/{_id} a :Female ."
  
:source_females xrr:query "db.awards.find({'sex' : 'female'})"; rml:iterator "$"  .  

<#Female_Female>
 xrr:logicalSource :source_females ;
 rr:subjectMap [ rr:template "ex:person/{_id}"];
 rr:predicateObjectMap [
     rr:predicate rdf:type;
     rr:objectMap [
        rr:constant  :Female;
        rr:termType rr:IRI
     ]
 ].

#"target": "ex:person/{_id} a :Male ."

:source_males xrr:query "db.awards.find({'sex' : 'male'})"; rml:iterator "$"  .  

<#Male_Male>
xrr:logicalSource :source_males ;
rr:subjectMap [ rr:template "ex:person/{_id}"];
rr:predicateObjectMap [
  rr:predicate rdf:type;
  rr:objectMap [
     rr:constant  :Male;
     rr:termType rr:IRI
  ]
].

#"target": "ex:person/{_id}/award/{awards.#} a :Award ; :receivedIn {awards.#.year}^^xsd:integer ; :hasTitle {awards.#.award}^^xsd:string . "
:source_awards xrr:query "db.awards.find({})"; rml:iterator "$.awards[*]"  .

<#Award_Award>
xrr:logicalSource :source_awards ;
rr:subjectMap [ rr:template "ex:person/award/{$.id}"];
rr:predicateObjectMap [
    rr:predicate rdf:type;
    rr:objectMap [
       rr:constant  :Award;
       rr:termType rr:IRI
    ]
].

<#Award_receivedIn>
 	xrr:logicalSource :source_awards ;
 	rr:subjectMap [ rr:template  "ex:person/award/{$.id}"];
	rr:predicateObjectMap [
  		rr:predicate :receivedIn;
	rr:objectMap [ xrr:reference "$.year" ]
]. 

<#Award_hasTitle>
 	xrr:logicalSource :source_awards ;
 	rr:subjectMap [ rr:template  "ex:person/award/{$.id}"];
	rr:predicateObjectMap [
  		rr:predicate :hasTitle;
	rr:objectMap [ xrr:reference "$..award" ]
]. 